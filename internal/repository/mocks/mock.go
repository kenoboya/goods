// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mock_repo is a generated GoMock package.
package mock_repo

import (
	context "context"
	model "goods/internal/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCategories is a mock of Categories interface.
type MockCategories struct {
	ctrl     *gomock.Controller
	recorder *MockCategoriesMockRecorder
}

// MockCategoriesMockRecorder is the mock recorder for MockCategories.
type MockCategoriesMockRecorder struct {
	mock *MockCategories
}

// NewMockCategories creates a new mock instance.
func NewMockCategories(ctrl *gomock.Controller) *MockCategories {
	mock := &MockCategories{ctrl: ctrl}
	mock.recorder = &MockCategoriesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCategories) EXPECT() *MockCategoriesMockRecorder {
	return m.recorder
}

// GetCategories mocks base method.
func (m *MockCategories) GetCategories(ctx context.Context) ([]model.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategories", ctx)
	ret0, _ := ret[0].([]model.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategories indicates an expected call of GetCategories.
func (mr *MockCategoriesMockRecorder) GetCategories(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategories", reflect.TypeOf((*MockCategories)(nil).GetCategories), ctx)
}

// GetCategoryByID mocks base method.
func (m *MockCategories) GetCategoryByID(ctx context.Context, categoryID int8) (model.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategoryByID", ctx, categoryID)
	ret0, _ := ret[0].(model.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategoryByID indicates an expected call of GetCategoryByID.
func (mr *MockCategoriesMockRecorder) GetCategoryByID(ctx, categoryID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategoryByID", reflect.TypeOf((*MockCategories)(nil).GetCategoryByID), ctx, categoryID)
}

// GetCategoryByName mocks base method.
func (m *MockCategories) GetCategoryByName(ctx context.Context, categoryName string) (model.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategoryByName", ctx, categoryName)
	ret0, _ := ret[0].(model.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategoryByName indicates an expected call of GetCategoryByName.
func (mr *MockCategoriesMockRecorder) GetCategoryByName(ctx, categoryName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategoryByName", reflect.TypeOf((*MockCategories)(nil).GetCategoryByName), ctx, categoryName)
}

// MockProducts is a mock of Products interface.
type MockProducts struct {
	ctrl     *gomock.Controller
	recorder *MockProductsMockRecorder
}

// MockProductsMockRecorder is the mock recorder for MockProducts.
type MockProductsMockRecorder struct {
	mock *MockProducts
}

// NewMockProducts creates a new mock instance.
func NewMockProducts(ctrl *gomock.Controller) *MockProducts {
	mock := &MockProducts{ctrl: ctrl}
	mock.recorder = &MockProductsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProducts) EXPECT() *MockProductsMockRecorder {
	return m.recorder
}

// GetProductByID mocks base method.
func (m *MockProducts) GetProductByID(ctx context.Context, productID int) (model.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductByID", ctx, productID)
	ret0, _ := ret[0].(model.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductByID indicates an expected call of GetProductByID.
func (mr *MockProductsMockRecorder) GetProductByID(ctx, productID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductByID", reflect.TypeOf((*MockProducts)(nil).GetProductByID), ctx, productID)
}

// GetProductByName mocks base method.
func (m *MockProducts) GetProductByName(ctx context.Context, productName string) (model.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductByName", ctx, productName)
	ret0, _ := ret[0].(model.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductByName indicates an expected call of GetProductByName.
func (mr *MockProductsMockRecorder) GetProductByName(ctx, productName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductByName", reflect.TypeOf((*MockProducts)(nil).GetProductByName), ctx, productName)
}

// GetProducts mocks base method.
func (m *MockProducts) GetProducts(ctx context.Context) ([]model.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProducts", ctx)
	ret0, _ := ret[0].([]model.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProducts indicates an expected call of GetProducts.
func (mr *MockProductsMockRecorder) GetProducts(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProducts", reflect.TypeOf((*MockProducts)(nil).GetProducts), ctx)
}

// GetProductsByCategoryID mocks base method.
func (m *MockProducts) GetProductsByCategoryID(ctx context.Context, categoryID int8) ([]model.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductsByCategoryID", ctx, categoryID)
	ret0, _ := ret[0].([]model.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductsByCategoryID indicates an expected call of GetProductsByCategoryID.
func (mr *MockProductsMockRecorder) GetProductsByCategoryID(ctx, categoryID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductsByCategoryID", reflect.TypeOf((*MockProducts)(nil).GetProductsByCategoryID), ctx, categoryID)
}

// MockBaskets is a mock of Baskets interface.
type MockBaskets struct {
	ctrl     *gomock.Controller
	recorder *MockBasketsMockRecorder
}

// MockBasketsMockRecorder is the mock recorder for MockBaskets.
type MockBasketsMockRecorder struct {
	mock *MockBaskets
}

// NewMockBaskets creates a new mock instance.
func NewMockBaskets(ctrl *gomock.Controller) *MockBaskets {
	mock := &MockBaskets{ctrl: ctrl}
	mock.recorder = &MockBasketsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBaskets) EXPECT() *MockBasketsMockRecorder {
	return m.recorder
}

// CreateBasket mocks base method.
func (m *MockBaskets) CreateBasket(ctx context.Context, customerID string, product_id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBasket", ctx, customerID, product_id)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateBasket indicates an expected call of CreateBasket.
func (mr *MockBasketsMockRecorder) CreateBasket(ctx, customerID, product_id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBasket", reflect.TypeOf((*MockBaskets)(nil).CreateBasket), ctx, customerID, product_id)
}

// DeleteProductFromBasket mocks base method.
func (m *MockBaskets) DeleteProductFromBasket(ctx context.Context, customerID string, productID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProductFromBasket", ctx, customerID, productID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProductFromBasket indicates an expected call of DeleteProductFromBasket.
func (mr *MockBasketsMockRecorder) DeleteProductFromBasket(ctx, customerID, productID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProductFromBasket", reflect.TypeOf((*MockBaskets)(nil).DeleteProductFromBasket), ctx, customerID, productID)
}

// UpdateProductFromBasket mocks base method.
func (m *MockBaskets) UpdateProductFromBasket(ctx context.Context, customerID string, productID int, quantity int8) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProductFromBasket", ctx, customerID, productID, quantity)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProductFromBasket indicates an expected call of UpdateProductFromBasket.
func (mr *MockBasketsMockRecorder) UpdateProductFromBasket(ctx, customerID, productID, quantity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProductFromBasket", reflect.TypeOf((*MockBaskets)(nil).UpdateProductFromBasket), ctx, customerID, productID, quantity)
}

// MockOrders is a mock of Orders interface.
type MockOrders struct {
	ctrl     *gomock.Controller
	recorder *MockOrdersMockRecorder
}

// MockOrdersMockRecorder is the mock recorder for MockOrders.
type MockOrdersMockRecorder struct {
	mock *MockOrders
}

// NewMockOrders creates a new mock instance.
func NewMockOrders(ctrl *gomock.Controller) *MockOrders {
	mock := &MockOrders{ctrl: ctrl}
	mock.recorder = &MockOrdersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrders) EXPECT() *MockOrdersMockRecorder {
	return m.recorder
}

// CreateOrder mocks base method.
func (m *MockOrders) CreateOrder(ctx context.Context, order model.OrderDatabase) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", ctx, order)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockOrdersMockRecorder) CreateOrder(ctx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockOrders)(nil).CreateOrder), ctx, order)
}

// CreateOrderDetails mocks base method.
func (m *MockOrders) CreateOrderDetails(ctx context.Context, order model.OrderDetailsDatabase) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrderDetails", ctx, order)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrderDetails indicates an expected call of CreateOrderDetails.
func (mr *MockOrdersMockRecorder) CreateOrderDetails(ctx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrderDetails", reflect.TypeOf((*MockOrders)(nil).CreateOrderDetails), ctx, order)
}

// CreateOrderProducts mocks base method.
func (m *MockOrders) CreateOrderProducts(ctx context.Context, order model.OrderProductDatabase) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrderProducts", ctx, order)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrderProducts indicates an expected call of CreateOrderProducts.
func (mr *MockOrdersMockRecorder) CreateOrderProducts(ctx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrderProducts", reflect.TypeOf((*MockOrders)(nil).CreateOrderProducts), ctx, order)
}

// MockCustomers is a mock of Customers interface.
type MockCustomers struct {
	ctrl     *gomock.Controller
	recorder *MockCustomersMockRecorder
}

// MockCustomersMockRecorder is the mock recorder for MockCustomers.
type MockCustomersMockRecorder struct {
	mock *MockCustomers
}

// NewMockCustomers creates a new mock instance.
func NewMockCustomers(ctrl *gomock.Controller) *MockCustomers {
	mock := &MockCustomers{ctrl: ctrl}
	mock.recorder = &MockCustomersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCustomers) EXPECT() *MockCustomersMockRecorder {
	return m.recorder
}

// CreateCustomer mocks base method.
func (m *MockCustomers) CreateCustomer(ctx context.Context, customer model.Customer) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCustomer", ctx, customer)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCustomer indicates an expected call of CreateCustomer.
func (mr *MockCustomersMockRecorder) CreateCustomer(ctx, customer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCustomer", reflect.TypeOf((*MockCustomers)(nil).CreateCustomer), ctx, customer)
}

// GetCustomerByID mocks base method.
func (m *MockCustomers) GetCustomerByID(ctx context.Context, customerID int64) (model.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomerByID", ctx, customerID)
	ret0, _ := ret[0].(model.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomerByID indicates an expected call of GetCustomerByID.
func (mr *MockCustomersMockRecorder) GetCustomerByID(ctx, customerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomerByID", reflect.TypeOf((*MockCustomers)(nil).GetCustomerByID), ctx, customerID)
}

// MockSuppliers is a mock of Suppliers interface.
type MockSuppliers struct {
	ctrl     *gomock.Controller
	recorder *MockSuppliersMockRecorder
}

// MockSuppliersMockRecorder is the mock recorder for MockSuppliers.
type MockSuppliersMockRecorder struct {
	mock *MockSuppliers
}

// NewMockSuppliers creates a new mock instance.
func NewMockSuppliers(ctrl *gomock.Controller) *MockSuppliers {
	mock := &MockSuppliers{ctrl: ctrl}
	mock.recorder = &MockSuppliersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSuppliers) EXPECT() *MockSuppliersMockRecorder {
	return m.recorder
}

// CreateSupplier mocks base method.
func (m *MockSuppliers) CreateSupplier(ctx context.Context, supplier model.Supplier) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSupplier", ctx, supplier)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSupplier indicates an expected call of CreateSupplier.
func (mr *MockSuppliersMockRecorder) CreateSupplier(ctx, supplier interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSupplier", reflect.TypeOf((*MockSuppliers)(nil).CreateSupplier), ctx, supplier)
}

// MockShipping is a mock of Shipping interface.
type MockShipping struct {
	ctrl     *gomock.Controller
	recorder *MockShippingMockRecorder
}

// MockShippingMockRecorder is the mock recorder for MockShipping.
type MockShippingMockRecorder struct {
	mock *MockShipping
}

// NewMockShipping creates a new mock instance.
func NewMockShipping(ctrl *gomock.Controller) *MockShipping {
	mock := &MockShipping{ctrl: ctrl}
	mock.recorder = &MockShippingMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockShipping) EXPECT() *MockShippingMockRecorder {
	return m.recorder
}

// CreateShippingDetails mocks base method.
func (m *MockShipping) CreateShippingDetails(ctx context.Context, shippingDetails model.DeliveryAddress) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateShippingDetails", ctx, shippingDetails)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateShippingDetails indicates an expected call of CreateShippingDetails.
func (mr *MockShippingMockRecorder) CreateShippingDetails(ctx, shippingDetails interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateShippingDetails", reflect.TypeOf((*MockShipping)(nil).CreateShippingDetails), ctx, shippingDetails)
}

// MockPromocodes is a mock of Promocodes interface.
type MockPromocodes struct {
	ctrl     *gomock.Controller
	recorder *MockPromocodesMockRecorder
}

// MockPromocodesMockRecorder is the mock recorder for MockPromocodes.
type MockPromocodesMockRecorder struct {
	mock *MockPromocodes
}

// NewMockPromocodes creates a new mock instance.
func NewMockPromocodes(ctrl *gomock.Controller) *MockPromocodes {
	mock := &MockPromocodes{ctrl: ctrl}
	mock.recorder = &MockPromocodesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPromocodes) EXPECT() *MockPromocodesMockRecorder {
	return m.recorder
}

// GetPromocodeByID mocks base method.
func (m *MockPromocodes) GetPromocodeByID(ctx context.Context, promocodeID string) (model.Promocode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPromocodeByID", ctx, promocodeID)
	ret0, _ := ret[0].(model.Promocode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPromocodeByID indicates an expected call of GetPromocodeByID.
func (mr *MockPromocodesMockRecorder) GetPromocodeByID(ctx, promocodeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPromocodeByID", reflect.TypeOf((*MockPromocodes)(nil).GetPromocodeByID), ctx, promocodeID)
}
